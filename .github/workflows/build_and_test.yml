name: build_and_test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: ~

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        build_type: [Debug, Release]
        compiler: [
         {
          "cc": "/usr/bin/gcc-10",
          "cxx": "/usr/bin/g++-10"
         }
         # {
         #  "cc": "/usr/bin/clang-11",
         #  "cxx": "/usr/bin/clang++-11"
         # }
        ]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          libboost-dev                                  \
          libgtest-dev                                  \
          coinor-libipopt-dev

    - name: Install Eigen 3.4
      run: |
        git clone --branch 3.4.0 https://gitlab.com/libeigen/eigen.git ${{ github.workspace }}/deps/eigen
        cmake                                           \
          -S ${{ github.workspace }}/deps/eigen         \
          -B ${{ github.workspace }}/deps/eigen/build
        cmake --build ${{ github.workspace }}/deps/eigen/build
        sudo cmake --install ${{ github.workspace }}/deps/eigen/build

    - name: Install smooth
      run: |
        git clone https://github.com/pettni/smooth.git ${{ github.workspace }}/deps/smooth
        cmake                                           \
          -S ${{ github.workspace }}/deps/smooth        \
          -B ${{ github.workspace }}/deps/smooth/build  \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_TESTING=OFF
        cmake --build ${{ github.workspace }}/deps/smooth/build
        sudo cmake --install ${{ github.workspace }}/deps/smooth/build

    - name: Configure CMake
      run: |
        cmake -B ${{ github.workspace }}/build          \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}     \
        -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }}    \
        -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
        -DBUILD_TESTING=ON \
        -DBUILD_EXAMPLES=ON

    - name: Build
      working-directory: ${{ github.workspace }}/build
      run: make -j2

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: make test

  codecov:
    needs: [build]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
        lcov                                            \
        libboost-dev                                    \
        libgtest-dev                                    \
        coinor-libipopt-dev

    - name: Install Eigen 3.4
      run: |
        git clone --branch 3.4.0 https://gitlab.com/libeigen/eigen.git ${{ github.workspace }}/deps/eigen
        cmake \
          -S ${{ github.workspace }}/deps/eigen         \
          -B ${{ github.workspace }}/deps/eigen/build
        cmake --build ${{ github.workspace }}/deps/eigen/build
        sudo cmake --install ${{ github.workspace }}/deps/eigen/build

    - name: Install smooth
      run: |
        git clone https://github.com/pettni/smooth.git ${{ github.workspace }}/deps/smooth
        cmake                                          \
          -S ${{ github.workspace }}/deps/smooth       \
          -B ${{ github.workspace }}/deps/smooth/build \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_TESTING=OFF
        cmake --build ${{ github.workspace }}/deps/smooth/build
        sudo cmake --install ${{ github.workspace }}/deps/smooth/build

    - name: Configure CMake
      run: |
        cmake -B ${{ github.workspace }}/build            \
        -DCMAKE_BUILD_TYPE=Debug                          \
        -DCMAKE_C_COMPILER=/usr/bin/gcc-10                \
        -DCMAKE_CXX_COMPILER=/usr/bin/g++-10              \
        -DCMAKE_CXX_FLAGS="-O0 -g --coverage -fno-inline" \
        -DCMAKE_EXE_LINKER_FLAGS="--coverage"             \
        -DBUILD_TESTING=ON                                \
        -DBUILD_EXAMPLES=OFF

    - name: Build
      working-directory: ${{ github.workspace }}/build
      run: make -j2

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: make test

    - name: Analyze coverage
      working-directory: ${{ github.workspace }}
      run: |
        lcov -c --no-external --directory include -d build/CMakeFiles -o coverage.info
        lcov --list coverage.info
        bash <(curl -s https://codecov.io/bash) -f coverage.info -t ${{ secrets.CODECOV_TOKEN }}
